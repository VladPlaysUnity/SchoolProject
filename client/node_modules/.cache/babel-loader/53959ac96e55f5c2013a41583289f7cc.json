{"ast":null,"code":"import { addUser, getAllUsers } from './../../DataBase/Users.js';\nimport { getLoggedUserId, setLoggedUserId } from './../../LocalInfo/localInfo.js';\nconst LOG_IN = 'LOG-IN';\nconst SIGN_UP = 'SIGN-UP';\nlet initialState = {};\n\nconst registrationReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN:\n      {\n        async function tryLog() {\n          const respons = await fetch(`http://localhost:5000/user/checkIfUsersDataIsRight/${action.username}/${action.password}`);\n\n          if (!respons.ok) {\n            const message = `An error occurred at registpage: ${respons.statusText}`;\n            window.alert(message);\n            return;\n          }\n\n          setLoggedUserId(await respons.json());\n          console.log(getLoggedUserId());\n          return state;\n        }\n\n        tryLog();\n      }\n\n    case SIGN_UP:\n      {\n        async function signUpFu(name, pass, email) {\n          const newUser = {\n            name: name,\n            password: pass,\n            email: email\n          };\n          const response = await fetch(\"http://localhost:5000/user/add\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newUser)\n          });\n\n          if (!response.ok) {\n            const message = `An error occurred at registpage: ${response.statusText}`;\n            window.alert(message);\n            return;\n          }\n\n          setLoggedUserId(await response.json());\n          return state;\n        }\n\n        signUpFu(action.username, action.password, action.email);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default registrationReducer;\nexport const tryLogIn = (username, password) => ({\n  type: LOG_IN,\n  username: username,\n  password: password\n});\nexport const trySignUp = (username, password, email) => ({\n  type: SIGN_UP,\n  username: username,\n  password: password,\n  email: email\n});","map":{"version":3,"sources":["D:/Programming/Projects/SchoolProject/client/src/redux/reducers/registrationReducer.js"],"names":["addUser","getAllUsers","getLoggedUserId","setLoggedUserId","LOG_IN","SIGN_UP","initialState","registrationReducer","state","action","type","tryLog","respons","fetch","username","password","ok","message","statusText","window","alert","json","console","log","signUpFu","name","pass","email","newUser","response","method","headers","body","JSON","stringify","tryLogIn","trySignUp"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,WAAjB,QAAmC,2BAAnC;AACA,SAAQC,eAAR,EAAyBC,eAAzB,QAA+C,gCAA/C;AAEA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,OAAO,GAAG,SAAhB;AAEA,IAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAMC,mBAAmB,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,MAAL;AAAY;AACV,uBAAeO,MAAf,GAAuB;AACrB,gBAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,sDAAqDJ,MAAM,CAACK,QAAS,IAAGL,MAAM,CAACM,QAAS,EAA1F,CAA3B;;AAEA,cAAI,CAACH,OAAO,CAACI,EAAb,EAAiB;AACd,kBAAMC,OAAO,GAAI,oCAAmCL,OAAO,CAACM,UAAW,EAAvE;AACCC,YAAAA,MAAM,CAACC,KAAP,CAAaH,OAAb;AACA;AACH;;AAEDd,UAAAA,eAAe,CAAC,MAAMS,OAAO,CAACS,IAAR,EAAP,CAAf;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYrB,eAAe,EAA3B;AACA,iBAAOM,KAAP;AACD;;AACDG,QAAAA,MAAM;AACP;;AACD,SAAKN,OAAL;AAAa;AACX,uBAAemB,QAAf,CAAwBC,IAAxB,EAA8BC,IAA9B,EAAoCC,KAApC,EAA2C;AAEzC,gBAAMC,OAAO,GAAG;AAAEH,YAAAA,IAAI,EAAEA,IAAR;AAAcV,YAAAA,QAAQ,EAAEW,IAAxB;AAA8BC,YAAAA,KAAK,EAACA;AAApC,WAAhB;AACA,gBAAME,QAAQ,GAAG,MAAMhB,KAAK,CAAC,gCAAD,EAAmC;AAC9DiB,YAAAA,MAAM,EAAE,MADsD;AAE9DC,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT,aAFqD;AAK9DC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf;AALwD,WAAnC,CAA5B;;AAOD,cAAI,CAACC,QAAQ,CAACb,EAAd,EAAkB;AACf,kBAAMC,OAAO,GAAI,oCAAmCY,QAAQ,CAACX,UAAW,EAAxE;AACCC,YAAAA,MAAM,CAACC,KAAP,CAAaH,OAAb;AACA;AACH;;AACDd,UAAAA,eAAe,CAAC,MAAM0B,QAAQ,CAACR,IAAT,EAAP,CAAf;AACA,iBAAOb,KAAP;AACA;;AACDgB,QAAAA,QAAQ,CAACf,MAAM,CAACK,QAAR,EAAkBL,MAAM,CAACM,QAAzB,EAAmCN,MAAM,CAACkB,KAA1C,CAAR;AACD;;AAED;AACE,aAAOnB,KAAP;AAxCJ;AA0CD,CA3CD;;AA6CA,eAAeD,mBAAf;AAEA,OAAO,MAAM4B,QAAQ,GAAG,CAACrB,QAAD,EAAWC,QAAX,MACtB;AAACL,EAAAA,IAAI,EAAEN,MAAP;AAAeU,EAAAA,QAAQ,EAACA,QAAxB;AAAkCC,EAAAA,QAAQ,EAACA;AAA3C,CADsB,CAAjB;AAEP,OAAO,MAAMqB,SAAS,GAAG,CAACtB,QAAD,EAAWC,QAAX,EAAqBY,KAArB,MACvB;AAACjB,EAAAA,IAAI,EAAEL,OAAP;AAAgBS,EAAAA,QAAQ,EAACA,QAAzB;AAAmCC,EAAAA,QAAQ,EAACA,QAA5C;AAAsDY,EAAAA,KAAK,EAACA;AAA5D,CADuB,CAAlB","sourcesContent":["import {addUser, getAllUsers} from './../../DataBase/Users.js'\r\nimport {getLoggedUserId, setLoggedUserId} from './../../LocalInfo/localInfo.js'\r\n\r\nconst LOG_IN = 'LOG-IN';\r\nconst SIGN_UP = 'SIGN-UP';\r\n\r\nlet initialState = {}\r\n\r\nconst registrationReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOG_IN:{\r\n      async function tryLog(){\r\n        const respons = await fetch(`http://localhost:5000/user/checkIfUsersDataIsRight/${action.username}/${action.password}`);\r\n\r\n        if (!respons.ok) {\r\n           const message = `An error occurred at registpage: ${respons.statusText}`;\r\n            window.alert(message);\r\n            return;\r\n        }\r\n\r\n        setLoggedUserId(await respons.json())\r\n        console.log(getLoggedUserId());\r\n        return state\r\n      }\r\n      tryLog()\r\n    }\r\n    case SIGN_UP:{\r\n      async function signUpFu(name, pass, email) {\r\n\r\n        const newUser = { name: name, password: pass, email:email };\r\n        const response = await fetch(\"http://localhost:5000/user/add\", {\r\n         method: \"POST\",\r\n         headers: {\r\n           \"Content-Type\": \"application/json\",\r\n         },\r\n         body: JSON.stringify(newUser),\r\n       })\r\n       if (!response.ok) {\r\n          const message = `An error occurred at registpage: ${response.statusText}`;\r\n           window.alert(message);\r\n           return;\r\n       }\r\n       setLoggedUserId(await response.json());\r\n       return state;\r\n      }\r\n      signUpFu(action.username, action.password, action.email)\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default registrationReducer;\r\n\r\nexport const tryLogIn = (username, password) => (\r\n  {type: LOG_IN, username:username, password:password});\r\nexport const trySignUp = (username, password, email) => (\r\n  {type: SIGN_UP, username:username, password:password, email:email});\r\n"]},"metadata":{},"sourceType":"module"}