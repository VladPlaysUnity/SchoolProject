{"ast":null,"code":"async function addComment(author_id, place_id, content) {//creates and adds comment to a db\n}\n\nexport const changeLikeOrDislikeOfComment = (user_id, comment_id, like_or_dislike) => {\n  //changes the list of likes or dislikes of mentioned comment in db\n  console.log(user_id, comment_id, like_or_dislike);\n\n  for (let i = 0; i < dbComments.comments.length; i++) {\n    if (dbComments.comments[i].id == comment_id) {\n      if (like_or_dislike == 'like') {\n        if (dbComments.comments[i].dynamicInfo.likes.includes(user_id)) {\n          for (let j = 0; j < dbComments.comments[i].dynamicInfo.likes.length; j++) {\n            if (dbComments.comments[i].dynamicInfo.likes[j] == user_id) {\n              dbComments.comments[i].dynamicInfo.likes.splice(j, 1);\n              return 'User has removed the like';\n            }\n          }\n        } else {\n          for (let j = 0; j < dbComments.comments[i].dynamicInfo.dislikes.length; j++) {\n            if (dbComments.comments[i].dynamicInfo.dislikes[j] == user_id) {\n              dbComments.comments[i].dynamicInfo.dislikes.splice(j, 1);\n            }\n          }\n\n          dbComments.comments[i].dynamicInfo.likes.push(user_id);\n          return 'Success!';\n        }\n      } else if (like_or_dislike == 'dislike') {\n        if (dbComments.comments[i].dynamicInfo.dislikes.includes(user_id)) {\n          for (let j = 0; j < dbComments.comments[i].dynamicInfo.dislikes.length; j++) {\n            if (dbComments.comments[i].dynamicInfo.dislikes[j] == user_id) {\n              dbComments.comments[i].dynamicInfo.dislikes.splice(j, 1);\n              return 'User has removed the dislike';\n            }\n          }\n        } else {\n          for (let j = 0; j < dbComments.comments[i].dynamicInfo.likes.length; j++) {\n            if (dbComments.comments[i].dynamicInfo.likes[j] == user_id) {\n              dbComments.comments[i].dynamicInfo.likes.splice(j, 1);\n            }\n          }\n\n          dbComments.comments[i].dynamicInfo.dislikes.push(user_id);\n          return 'Success!';\n        }\n      }\n    }\n  }\n};\n\nasync function getCommentById(comment_id) {\n  //returns comment whose id is metioned\n  const response = await fetch(`http://localhost:5000/comment/getCommentById/${comment_id}`);\n\n  if (!response.ok) {\n    const message = `An error occurred at getUserById: ${response.statusText}`;\n    window.alert(message);\n    return;\n  }\n\n  return await response.json();\n}\n\nasync function getUsersComments(user_id) {\n  const response = await fetch(`http://localhost:5000/comment/getUsersComments/${user_id}`);\n\n  if (!response.ok) {\n    const message = `An error occurred at getUserById: ${response.statusText}`;\n    window.alert(message);\n    return;\n  }\n\n  return await response.json();\n}\n\nasync function getFictionsComments(fiction_id) {\n  //\n  const response = await fetch(`http://localhost:5000/comment/getFictionsComments/${fiction_id}`);\n\n  if (!response.ok) {\n    const message = `An error occurred at getUserById: ${response.statusText}`;\n    window.alert(message);\n    return;\n  }\n\n  return await response.json();\n}\n\nasync function getStatusOfCommentFromUser(comment_id, user_id) {\n  //\n  const response = await fetch(`http://localhost:5000/comment/getStatusOfCommentFromUser/${comment_id}/${user_id}`);\n\n  if (!response.ok) {\n    const message = `An error occurred at getUserById: ${response.statusText}`;\n    window.alert(message);\n    return;\n  }\n\n  return await response.json();\n}\n\nexport { getCommentById, getUsersComments, getFictionsComments, getStatusOfCommentFromUser };","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/SchoolProject/client/src/DataBase/Comments.js"],"names":["addComment","author_id","place_id","content","changeLikeOrDislikeOfComment","user_id","comment_id","like_or_dislike","console","log","i","dbComments","comments","length","id","dynamicInfo","likes","includes","j","splice","dislikes","push","getCommentById","response","fetch","ok","message","statusText","window","alert","json","getUsersComments","getFictionsComments","fiction_id","getStatusOfCommentFromUser"],"mappings":"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","sourcesContent":["async function addComment (author_id, place_id, content) {\r\n  //creates and adds comment to a db\r\n}\r\n\r\nexport const changeLikeOrDislikeOfComment = (user_id, comment_id, like_or_dislike) =>{\r\n  //changes the list of likes or dislikes of mentioned comment in db\r\n  console.log(user_id, comment_id, like_or_dislike);\r\n  for (let i = 0; i < dbComments.comments.length; i++) {\r\n    if (dbComments.comments[i].id == comment_id){\r\n      if (like_or_dislike == 'like'){\r\n        if (dbComments.comments[i].dynamicInfo.likes.includes(user_id)){\r\n          for (let j = 0; j < dbComments.comments[i].dynamicInfo.likes.length; j++) {\r\n            if (dbComments.comments[i].dynamicInfo.likes[j] == user_id){\r\n              dbComments.comments[i].dynamicInfo.likes.splice(j,1)\r\n              return 'User has removed the like'\r\n            }\r\n          }\r\n        } else{\r\n          for (let j = 0; j < dbComments.comments[i].dynamicInfo.dislikes.length; j++) {\r\n            if (dbComments.comments[i].dynamicInfo.dislikes[j] == user_id){\r\n              dbComments.comments[i].dynamicInfo.dislikes.splice(j,1)\r\n            }\r\n          }\r\n          dbComments.comments[i].dynamicInfo.likes.push(user_id)\r\n          return 'Success!'\r\n        }\r\n      } else if(like_or_dislike == 'dislike'){\r\n       if (dbComments.comments[i].dynamicInfo.dislikes.includes(user_id)){\r\n         for (let j = 0; j < dbComments.comments[i].dynamicInfo.dislikes.length; j++) {\r\n           if (dbComments.comments[i].dynamicInfo.dislikes[j] == user_id){\r\n             dbComments.comments[i].dynamicInfo.dislikes.splice(j,1)\r\n             return 'User has removed the dislike'\r\n           }\r\n         }\r\n       } else{\r\n         for (let j = 0; j < dbComments.comments[i].dynamicInfo.likes.length; j++) {\r\n           if (dbComments.comments[i].dynamicInfo.likes[j] == user_id){\r\n             dbComments.comments[i].dynamicInfo.likes.splice(j,1)\r\n           }\r\n         }\r\n         dbComments.comments[i].dynamicInfo.dislikes.push(user_id)\r\n         return 'Success!'\r\n       }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nasync function getCommentById (comment_id) {\r\n  //returns comment whose id is metioned\r\n  const response = await fetch(`http://localhost:5000/comment/getCommentById/${comment_id}`);\r\n\r\n  if (!response.ok) {\r\n     const message = `An error occurred at getUserById: ${response.statusText}`;\r\n      window.alert(message);\r\n      return;\r\n  }\r\n\r\n  return await response.json();\r\n}\r\n\r\nasync function getUsersComments (user_id) {\r\n  const response = await fetch(`http://localhost:5000/comment/getUsersComments/${user_id}`);\r\n\r\n  if (!response.ok) {\r\n     const message = `An error occurred at getUserById: ${response.statusText}`;\r\n      window.alert(message);\r\n      return;\r\n  }\r\n\r\n  return await response.json();\r\n}\r\n\r\nasync function getFictionsComments (fiction_id) {\r\n  //\r\n  const response = await fetch(`http://localhost:5000/comment/getFictionsComments/${fiction_id}`);\r\n\r\n  if (!response.ok) {\r\n     const message = `An error occurred at getUserById: ${response.statusText}`;\r\n      window.alert(message);\r\n      return;\r\n  }\r\n\r\n  return await response.json();\r\n}\r\n\r\nasync function getStatusOfCommentFromUser (comment_id, user_id) {\r\n  //\r\n  const response = await fetch(`http://localhost:5000/comment/getStatusOfCommentFromUser/${comment_id}/${user_id}`);\r\n\r\n  if (!response.ok) {\r\n     const message = `An error occurred at getUserById: ${response.statusText}`;\r\n      window.alert(message);\r\n      return;\r\n  }\r\n\r\n  return await response.json();\r\n}\r\n\r\nexport{ getCommentById, getUsersComments, getFictionsComments, getStatusOfCommentFromUser}\r\n"]},"metadata":{},"sourceType":"module"}