{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\Litsey_10th_grade\\\\Informatics\\\\Fictionlib\\\\webproject\\\\src\\\\components\\\\ProfilePage\\\\profilePagesContainer.jsx\";\nimport ProfilePage from './profile.jsx';\nimport { getAllUsers, getUsersFriends, getUserById } from './../../DataBase/Users.js';\nimport { getFictionById } from './../../DataBase/Fictions.js';\nimport { getUsersComments } from './../../DataBase/Comments.js';\nimport { getLoggedUserId, getLoggedInStatus } from './../../LocalInfo/localInfo.js';\nimport { Routes, Route } from \"react-router-dom\";\nimport CatalogPage from './../Catalog/catalog.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProfilePagesContainer = props => {\n  let userLinks = getAllUsers().map(user => {\n    let link = '/profile/' + user.id;\n    let type = 'nobodyIsLoggedIn';\n\n    if (getLoggedInStatus()) {\n      if (user.id == getLoggedUserId()) {\n        type = 'loggedUsersProfile';\n      } else {\n        type = 'notLoggedUsersProfile';\n      }\n    }\n\n    let planned_films = [];\n    let watched_films = [];\n    let planned_books = [];\n    let read_books = [];\n\n    for (let i = 0; i < user.markedFiction; i++) {\n      if (user.markedFiction[i].status == 'completed') {\n        let f = getFictionById(user.markedFiction[i].fiction_id);\n\n        if (f.type == 'book') {\n          read_books.push(f);\n        } else if (f.type == 'film') {\n          watched_films.push(f);\n        }\n      } else if (user.markedFiction[i].status == 'planned') {\n        let f = getFictionById(user.markedFiction[i].fiction_id);\n\n        if (f.type == 'book') {\n          planned_books.push(f);\n        } else if (f.type == 'film') {\n          planned_films.push(f);\n        }\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: link,\n        element: /*#__PURE__*/_jsxDEV(ProfilePage, {\n          dispatch: props.dispatch,\n          info: user.usersInfo,\n          friends: getUsersFriends(user.id),\n          comments: getUsersComments(user.id),\n          type: type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: link + '/planned_films',\n        element: /*#__PURE__*/_jsxDEV(CatalogPage, {\n          type: \"film\",\n          elems: planned_films\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: link + '/watched_films',\n        element: /*#__PURE__*/_jsxDEV(CatalogPage, {\n          type: \"film\",\n          elems: watched_films\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: link + '/planned_books',\n        element: /*#__PURE__*/_jsxDEV(CatalogPage, {\n          type: \"film\",\n          elems: planned_book\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: link + '/read_books',\n        element: /*#__PURE__*/_jsxDEV(CatalogPage, {\n          type: \"film\",\n          elems: read_books\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: userLinks\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ProfilePagesContainer;\nexport default ProfilePagesContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfilePagesContainer\");","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/webproject/src/components/ProfilePage/profilePagesContainer.jsx"],"names":["ProfilePage","getAllUsers","getUsersFriends","getUserById","getFictionById","getUsersComments","getLoggedUserId","getLoggedInStatus","Routes","Route","CatalogPage","ProfilePagesContainer","props","userLinks","map","user","link","id","type","planned_films","watched_films","planned_books","read_books","i","markedFiction","status","f","fiction_id","push","dispatch","usersInfo","planned_book"],"mappings":"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","sourcesContent":["import ProfilePage from './profile.jsx';\r\nimport {getAllUsers, getUsersFriends, getUserById} from './../../DataBase/Users.js'\r\nimport {getFictionById} from './../../DataBase/Fictions.js'\r\nimport {getUsersComments} from './../../DataBase/Comments.js'\r\nimport {getLoggedUserId, getLoggedInStatus} from './../../LocalInfo/localInfo.js'\r\nimport {Routes, Route} from \"react-router-dom\";\r\nimport CatalogPage from './../Catalog/catalog.jsx'\r\n\r\nconst ProfilePagesContainer = (props) =>{\r\n\r\n\r\n  let userLinks = getAllUsers().map((user)=>{\r\n    let link = '/profile/' + user.id;\r\n    let type = 'nobodyIsLoggedIn'\r\n    if (getLoggedInStatus()){\r\n      if (user.id == getLoggedUserId()) {\r\n        type = 'loggedUsersProfile';\r\n      } else{\r\n        type = 'notLoggedUsersProfile';\r\n      }\r\n    }\r\n\r\n    let planned_films = []\r\n    let watched_films = []\r\n    let planned_books = []\r\n    let read_books = []\r\n    for (let i = 0; i < user.markedFiction; i++){\r\n      if (user.markedFiction[i].status == 'completed'){\r\n        let f = getFictionById(user.markedFiction[i].fiction_id)\r\n        if (f.type == 'book'){\r\n          read_books.push(f)\r\n        } else if (f.type == 'film') {\r\n          watched_films.push(f)\r\n        }\r\n      } else if (user.markedFiction[i].status == 'planned') {\r\n        let f = getFictionById(user.markedFiction[i].fiction_id)\r\n        if (f.type == 'book'){\r\n          planned_books.push(f)\r\n        } else if (f.type == 'film') {\r\n          planned_films.push(f)\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    return (<><Route path={link}\r\n                        element={<ProfilePage dispatch={props.dispatch}\r\n                        info={user.usersInfo}\r\n                        friends={getUsersFriends(user.id)}\r\n                        comments={getUsersComments(user.id)} type={type}/>}/>\r\n            <Route path={link+'/planned_films'}\r\n                   element={<CatalogPage type='film' elems={planned_films}/>}/>\r\n            <Route path={link+'/watched_films'}\r\n                   element={<CatalogPage type='film' elems={watched_films}/>}/>\r\n            <Route path={link+'/planned_books'}\r\n                   element={<CatalogPage type='film' elems={planned_book}/>}/>\r\n            <Route path={link+'/read_books'}\r\n                   element={<CatalogPage type='film' elems={read_books}/>}/>\r\n            </>)\r\n  })\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Routes>\r\n      {userLinks}\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default ProfilePagesContainer;\r\n"]},"metadata":{},"sourceType":"module"}