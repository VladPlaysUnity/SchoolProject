{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\Litsey_10th_grade\\\\Informatics\\\\Fictionlib\\\\SchoolProject\\\\client\\\\src\\\\components\\\\ProfilePage\\\\profilePageContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport ProfilePage from './profile.jsx';\nimport { getAllUsers, getUsersFriends, getUserById, isFriend } from './../../DataBase/Users.js';\nimport { getFictionById } from './../../DataBase/Fictions.js';\nimport { getUsersComments } from './../../DataBase/Comments.js';\nimport { getLoggedUserId, getLoggedInStatus } from './../../LocalInfo/localInfo.js';\nimport { addUserAsFriendActionCreator, removeUserFromFriendlistActionCreator } from './../../redux/reducers/profileReducer.js';\nimport CatalogPage from './../Catalog/catalog.jsx';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProfilePageContainer = props => {\n  _s();\n\n  const [user, setUser] = useState({});\n  const [isUserFriend, setIsUserFriend] = useState(false);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const params = useParams();\n  let view = 'nobodyIsLoggedIn';\n  useEffect(() => {\n    getUserById(params.iD).then(res => {\n      console.log(getLoggedInStatus());\n\n      if (getLoggedInStatus()) {\n        console.log(parseInt(params.iD) == getLoggedUserId());\n\n        if (parseInt(params.iD) == getLoggedUserId()) {\n          view = 'loggedUsersProfile';\n          setUser(res);\n          setIsLoaded(true);\n        } else {\n          view = 'notLoggedUsersProfile';\n          isFriend(getLoggedUserId(), params.iD).then(d => {\n            setUser(res);\n            setIsUserFriend(true);\n            setIsLoaded(true);\n          });\n        }\n      } else {\n        setUser(res);\n        setIsLoaded(true);\n      }\n    }, error => {\n      setError(error);\n    });\n  }, [props.loggedUser]);\n\n  let addFriend = friend_id => {//props.dispatch(addUserAsFriendActionCreator(getLoggedUserId(), friend_id))\n  };\n\n  let removeFriend = friend_id => {//props.dispatch(removeUserFromFriendlistActionCreator(getLoggedUserId(), friend_id))\n  };\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  } else if (isLoaded) {\n    if (!user) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"User not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ProfilePage, {\n        dispatch: props.dispatch,\n        info: user.usersInfo,\n        iD: user.iD,\n        isFriend: isUserFriend,\n        friends: [],\n        addFriend: addFriend,\n        removeFriend: removeFriend,\n        comments: [],\n        view: view\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(ProfilePageContainer, \"20PXcuzd0S2zTRVLRX9icx0cnMI=\", false, function () {\n  return [useParams];\n});\n\n_c = ProfilePageContainer;\nexport default ProfilePageContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfilePageContainer\");","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/SchoolProject/client/src/components/ProfilePage/profilePageContainer.jsx"],"names":["ProfilePage","getAllUsers","getUsersFriends","getUserById","isFriend","getFictionById","getUsersComments","getLoggedUserId","getLoggedInStatus","addUserAsFriendActionCreator","removeUserFromFriendlistActionCreator","CatalogPage","useEffect","useState","useParams","ProfilePageContainer","props","user","setUser","isUserFriend","setIsUserFriend","error","setError","isLoaded","setIsLoaded","params","view","iD","then","res","console","log","parseInt","d","loggedUser","addFriend","friend_id","removeFriend","message","dispatch","usersInfo"],"mappings":"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","sourcesContent":["import ProfilePage from './profile.jsx';\r\nimport {getAllUsers, getUsersFriends, getUserById, isFriend} from './../../DataBase/Users.js'\r\nimport {getFictionById} from './../../DataBase/Fictions.js'\r\nimport {getUsersComments} from './../../DataBase/Comments.js'\r\nimport {getLoggedUserId, getLoggedInStatus} from './../../LocalInfo/localInfo.js'\r\nimport {addUserAsFriendActionCreator, removeUserFromFriendlistActionCreator} from './../../redux/reducers/profileReducer.js'\r\nimport CatalogPage from './../Catalog/catalog.jsx'\r\nimport { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst ProfilePageContainer = (props) =>{\r\n  const [user, setUser] = useState({})\r\n  const [isUserFriend, setIsUserFriend] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n  const params = useParams();\r\n\r\n  let view = 'nobodyIsLoggedIn'\r\n\r\n  useEffect(()=>{\r\n    getUserById(params.iD)\r\n    .then((res)=>{\r\n      console.log(getLoggedInStatus());\r\n      if (getLoggedInStatus()){\r\n        console.log(parseInt(params.iD) == getLoggedUserId());\r\n        if (parseInt(params.iD) == getLoggedUserId()) {\r\n          view = 'loggedUsersProfile';\r\n          setUser(res)\r\n          setIsLoaded(true)\r\n        } else{\r\n          view = 'notLoggedUsersProfile';\r\n          isFriend(getLoggedUserId(), params.iD)\r\n          .then((d)=>{\r\n            setUser(res)\r\n            setIsUserFriend(true)\r\n            setIsLoaded(true)\r\n          })\r\n        }\r\n      } else{\r\n        setUser(res)\r\n        setIsLoaded(true)\r\n      }\r\n    }, (error)=>{\r\n      setError(error)\r\n    })\r\n  }, [props.loggedUser])\r\n\r\n\r\n  let addFriend = (friend_id) =>{\r\n    //props.dispatch(addUserAsFriendActionCreator(getLoggedUserId(), friend_id))\r\n  }\r\n  let removeFriend = (friend_id) =>{\r\n    //props.dispatch(removeUserFromFriendlistActionCreator(getLoggedUserId(), friend_id))\r\n  }\r\n\r\n\r\n\r\n  if (error){\r\n    return <div>Error: {error.message}</div>\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>\r\n  } else if (isLoaded) {\r\n    if(!user){\r\n      return <div>User not found</div>\r\n    }\r\n    return(\r\n      <div>\r\n      <ProfilePage dispatch={props.dispatch}\r\n      info={user.usersInfo} iD={user.iD}\r\n      isFriend={isUserFriend}\r\n      friends={[]}\r\n      addFriend={addFriend} removeFriend={removeFriend}\r\n      comments={[]} view={view}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ProfilePageContainer;\r\n"]},"metadata":{},"sourceType":"module"}