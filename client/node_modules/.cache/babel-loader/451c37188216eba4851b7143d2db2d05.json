{"ast":null,"code":"function User(id, usersInfo, friends, markedFictions) {\n  this.id = id;\n  this.usersInfo = usersInfo;\n  this.friends = friends;\n  this.markedFictions = markedFictions;\n}\n\n_c = User;\nlet user0 = new User(0, {\n  profilePhoto: '',\n  name: 'John',\n  password: '123',\n  email: 'lol@gmail.com'\n}, [2, 1], [{\n  fiction_id: 0,\n  status: 'dropped'\n}, {\n  fiction_id: 2,\n  status: 'completed'\n}]);\nlet user1 = new User(1, {\n  profilePhoto: '',\n  name: 'Paul',\n  password: '456',\n  email: 'lol2@gmail.com'\n}, [0], [{\n  fiction_id: 0,\n  status: 'completed'\n}, {\n  fiction_id: 1,\n  status: 'planned'\n}]);\nlet user2 = new User(2, {\n  profilePhoto: '',\n  name: 'Kate',\n  password: '789',\n  email: 'lol3@gmail.com'\n}, [0], [{\n  fiction_id: 1,\n  status: 'in progress'\n}, {\n  fiction_id: 2,\n  status: 'completed'\n}, {\n  fiction_id: 0,\n  status: 'planned'\n}]);\nexport let dbUsers = {\n  users: [user0, user1, user2]\n};\nexport const addUser = (username, password, email) => {\n  //adds user to db\n  let newUser = new User(dbUsers.users[dbUsers.users.length - 1].id + 1, {\n    name: username,\n    password: password,\n    email: email\n  }, [], []);\n  dbUsers.users.push(newUser);\n  return newUser.id;\n};\n\nasync function getAllUsers() {\n  //returns list of all fictions\n  const response = await fetch(`http://localhost:5000/user/getAllUsers`);\n\n  if (!response.ok) {\n    const message = `An error occurred at getAllUsers: ${response.statusText}`;\n    window.alert(message);\n    return;\n  }\n\n  return await response.json();\n}\n\nasync function getUserById(user_id) {\n  //returns fiction whose id was mentioned\n  const response = await fetch(`http://localhost:5000/user/getUserById/${user_id}`);\n\n  if (!response.ok) {\n    const message = `An error occurred at getUserById: ${response.statusText}`;\n    window.alert(message);\n    return;\n  }\n\n  return await response.json();\n}\n\nasync function getFictionAtUser(user_id, fiction_id) {\n  //returns fiction whose id was mentioned\n  const response = await fetch(`http://localhost:5000/user/getFictionAtUser/${user_id}/${fiction_id}`);\n\n  if (!response.ok) {\n    const message = `An error occurred at getFictionAtUser: ${response.statusText}`;\n    window.alert(message);\n    return;\n  }\n\n  return await response.json();\n}\n\nexport const makeUsersFriends = (user1_id, user2_id) => {\n  //adds users to each others friendslists\n  for (let i = 0; i < dbUsers.users.length; i++) {\n    if (dbUsers.users[i].id == user1_id) {\n      dbUsers.users[i].friends.push(user2_id);\n    } else if (dbUsers.users[i].id == user2_id) {\n      dbUsers.users[i].friends.push(user1_id);\n    }\n  }\n\n  console.log(dbUsers.users);\n};\nexport const stopBeingFriends = (user1_id, user2_id) => {\n  for (let i = 0; i < dbUsers.users.length; i++) {\n    if (dbUsers.users[i].id == user1_id) {\n      for (let j = 0; j < dbUsers.users[i].friends.length; j++) {\n        if (user2_id == dbUsers.users[i].friends[j]) {\n          dbUsers.users[i].friends.splice(j, 1);\n        }\n      }\n    } else if (dbUsers.users[i].id == user2_id) {\n      for (let j = 0; j < dbUsers.users[i].friends.length; j++) {\n        if (user1_id == dbUsers.users[i].friends[j]) {\n          dbUsers.users[i].friends.splice(j, 1);\n        }\n      }\n    }\n  }\n\n  console.log(dbUsers.users);\n};\nexport const isFriend = (user1_id, user2_id) => {\n  return getUserById(user1_id).friends.includes(user2_id) ? true : false;\n};\nexport const getUsersFriends = user_id => {\n  //returns list of objects(users) which are friends of user\n  let friendsOfUser = [];\n  let user = getUserById(user_id);\n\n  for (let i = 0; i < user.friends.length; i++) {\n    friendsOfUser.push(getUserById(user.friends[i]));\n  }\n\n  return friendsOfUser;\n};\nexport const changeUsersStatusOfFiction = (user_id, fiction_id, status) => {\n  // changes users status of metioned fiction\n  for (let i = 0; i < dbUsers.users.length; i++) {\n    if (dbUsers.users[i].id == user_id) {\n      for (let j = 0; j < dbUsers.users[i].markedFictions.length; j++) {\n        if (dbUsers.users[i].markedFictions[j].fiction_id == fiction_id) {\n          if (status == 'not completed') {\n            dbUsers.users[i].markedFictions.splice(j, 1);\n            return;\n          } else {\n            dbUsers.users[i].markedFictions[j].status = status;\n            return;\n          }\n        }\n      }\n\n      dbUsers.users[i].markedFictions.push({\n        fiction_id: fiction_id,\n        status: status\n      });\n      return;\n    }\n  }\n};\nexport { getAllUsers, getUserById, getFictionAtUser };\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/SchoolProject/client/src/DataBase/Users.js"],"names":["User","id","usersInfo","friends","markedFictions","user0","profilePhoto","name","password","email","fiction_id","status","user1","user2","dbUsers","users","addUser","username","newUser","length","push","getAllUsers","response","fetch","ok","message","statusText","window","alert","json","getUserById","user_id","getFictionAtUser","makeUsersFriends","user1_id","user2_id","i","console","log","stopBeingFriends","j","splice","isFriend","includes","getUsersFriends","friendsOfUser","user","changeUsersStatusOfFiction"],"mappings":"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","sourcesContent":["function User(id, usersInfo, friends, markedFictions) {\r\n  this.id = id;\r\n  this.usersInfo = usersInfo;\r\n  this.friends = friends;\r\n  this.markedFictions = markedFictions;\r\n}\r\n\r\nlet user0 = new User(0, {profilePhoto:'', name:'John', password:'123', email:'lol@gmail.com'}, [2, 1], [{fiction_id: 0, status:'dropped'}, {fiction_id: 2, status:'completed'}])\r\nlet user1 = new User(1, {profilePhoto:'', name:'Paul', password:'456', email:'lol2@gmail.com'}, [0], [{fiction_id: 0, status:'completed'}, {fiction_id: 1, status:'planned'}])\r\nlet user2 = new User(2, {profilePhoto:'', name:'Kate', password:'789', email:'lol3@gmail.com'}, [0], [{fiction_id: 1, status:'in progress'}, {fiction_id: 2, status:'completed'}, {fiction_id: 0, status:'planned'}])\r\n\r\nexport let dbUsers = {users:[user0, user1, user2]}\r\n\r\n\r\nexport const addUser = (username, password, email) =>{\r\n  //adds user to db\r\n  let newUser = new User(dbUsers.users[dbUsers.users.length-1].id + 1, {name:username, password:password, email:email}, [], [])\r\n  dbUsers.users.push(newUser);\r\n  return newUser.id\r\n}\r\n\r\nasync function getAllUsers (){\r\n  //returns list of all fictions\r\n  const response = await fetch(`http://localhost:5000/user/getAllUsers`);\r\n\r\n  if (!response.ok) {\r\n     const message = `An error occurred at getAllUsers: ${response.statusText}`;\r\n      window.alert(message);\r\n      return;\r\n  }\r\n\r\n  return await response.json();\r\n}\r\n\r\nasync function getUserById(user_id){\r\n  //returns fiction whose id was mentioned\r\n  const response = await fetch(`http://localhost:5000/user/getUserById/${user_id}`);\r\n\r\n  if (!response.ok) {\r\n     const message = `An error occurred at getUserById: ${response.statusText}`;\r\n      window.alert(message);\r\n      return;\r\n  }\r\n\r\n  return await response.json();\r\n}\r\n\r\nasync function getFictionAtUser(user_id, fiction_id){\r\n  //returns fiction whose id was mentioned\r\n  const response = await fetch(`http://localhost:5000/user/getFictionAtUser/${user_id}/${fiction_id}`);\r\n\r\n  if (!response.ok) {\r\n     const message = `An error occurred at getFictionAtUser: ${response.statusText}`;\r\n      window.alert(message);\r\n      return;\r\n  }\r\n\r\n  return await response.json();\r\n}\r\n\r\nexport const makeUsersFriends = (user1_id, user2_id) =>{\r\n  //adds users to each others friendslists\r\n  for (let i=0;i < dbUsers.users.length; i++){\r\n    if (dbUsers.users[i].id == user1_id){\r\n      dbUsers.users[i].friends.push(user2_id)\r\n    } else if (dbUsers.users[i].id == user2_id){\r\n      dbUsers.users[i].friends.push(user1_id)\r\n    }\r\n  }\r\n  console.log(dbUsers.users);\r\n}\r\n\r\nexport const stopBeingFriends = (user1_id, user2_id) =>{\r\n  for (let i=0;i < dbUsers.users.length; i++){\r\n    if (dbUsers.users[i].id == user1_id){\r\n      for (let j = 0; j < dbUsers.users[i].friends.length; j++) {\r\n        if (user2_id == dbUsers.users[i].friends[j]){\r\n          dbUsers.users[i].friends.splice(j, 1)\r\n        }\r\n      }\r\n    } else if (dbUsers.users[i].id == user2_id){\r\n      for (let j = 0; j < dbUsers.users[i].friends.length; j++) {\r\n        if (user1_id == dbUsers.users[i].friends[j]){\r\n          dbUsers.users[i].friends.splice(j, 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  console.log(dbUsers.users);\r\n}\r\n\r\nexport const isFriend = (user1_id, user2_id)=>{\r\n  return getUserById(user1_id).friends.includes(user2_id) ? true : false\r\n}\r\n\r\nexport const getUsersFriends = (user_id) =>{\r\n  //returns list of objects(users) which are friends of user\r\n  let friendsOfUser = [];\r\n  let user = getUserById(user_id);\r\n  for (let i=0;i < user.friends.length; i++){\r\n    friendsOfUser.push(getUserById(user.friends[i]))\r\n  }\r\n  return friendsOfUser\r\n}\r\n\r\nexport const changeUsersStatusOfFiction = (user_id, fiction_id, status) =>{\r\n  // changes users status of metioned fiction\r\n\r\n  for (let i=0;i < dbUsers.users.length; i++){\r\n    if (dbUsers.users[i].id == user_id){\r\n      for (let j = 0; j < dbUsers.users[i].markedFictions.length; j++) {\r\n        if (dbUsers.users[i].markedFictions[j].fiction_id == fiction_id){\r\n          if ((status == 'not completed')){\r\n            dbUsers.users[i].markedFictions.splice(j, 1)\r\n            return\r\n          } else {\r\n            dbUsers.users[i].markedFictions[j].status = status\r\n            return\r\n          }\r\n        }\r\n      }\r\n      dbUsers.users[i].markedFictions.push({fiction_id:fiction_id, status:status})\r\n      return\r\n    }\r\n  }\r\n}\r\n\r\nexport { getAllUsers, getUserById, getFictionAtUser }\r\n"]},"metadata":{},"sourceType":"module"}