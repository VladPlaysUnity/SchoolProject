{"ast":null,"code":"const LOG_IN = 'LOG_IN';\nconst SIGN_UP = 'SIGN-UP';\nconst ADD_LIKED_OR_DISLIKED_COMMENT = 'ADD_LIKED_OR_DISLIKED_COMMENT';\nlet intialState = {\n  status: '-',\n  loggedUser: '',\n  users: getUsersFromDataBase()\n};\n\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : intialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN:\n      {\n        for (let i = 0; i < state.users.length; i++) {\n          if (state.users[i].usersInfo.name == action.username && state.users[i].usersInfo.password == action.password) {\n            let stateCopy = { ...state\n            };\n            stateCopy.loggedUser = state.users[i];\n            stateCopy.status = '+';\n            return stateCopy;\n          }\n        }\n\n        return state;\n      }\n\n    case SIGN_UP:\n      {\n        for (let i = 0; i < state.users.length; i++) {\n          if (state.users[i].usersInfo.name == action.username) {\n            return state;\n          }\n        }\n\n        let stateCopy = { ...state\n        };\n        let newUser = {\n          id: [stateCopy.users.length - 1],\n          usersInfo: {\n            name: action.username,\n            email: action.email,\n            password: action.password\n          },\n          commentsInfo: {\n            likedComments: [],\n            dislikedComments: []\n          },\n          markedBooks: [],\n          markedFilms: [],\n          lastReadBook: '',\n          lastWatchedFilm: ''\n        };\n        stateCopy.users = addUser(newUser);\n        stateCopy.loggedUser = stateCopy.users[stateCopy.users.length - 1];\n        stateCopy.status = '+';\n        return stateCopy;\n      }\n\n    case ADD_LIKED_OR_DISLIKED_COMMENT:\n      {\n        for (let i = 0; i < state.loggedUser.commentsInfo.likedComments.length; i++) {\n          if (action.id == state.loggedUser.commentsInfo.likedComments[i].id) {\n            return state;\n          }\n        }\n\n        for (let i = 0; i < state.loggedUser.commentsInfo.dislikedComments.length; i++) {\n          if (action.id == state.loggedUser.commentsInfo.dislikedComments[i].id) {\n            return state;\n          }\n        }\n\n        let stateCopy = { ...state\n        };\n\n        if (action.like_or_dislike == 'like') {\n          stateCopy.loggedUser.commentsInfo.likedComments = [...stateCopy.loggedUser.commentsInfo.likedComments];\n          stateCopy.loggedUser.commentsInfo.likedComments.push(action.id);\n          updateUser(stateCopy.loggedUser.id, { ...stateCopy.loggedUser\n          });\n        } else if (action.like_or_dislike == 'dislike') {\n          stateCopy.loggedUser.commentsInfo.dislikedComments = [...stateCopy.loggedUser.commentsInfo.dislikedComments];\n          stateCopy.loggedUser.commentsInfo.dislikedComments.push(action.id);\n          updateUser(stateCopy.loggedUser.id, { ...stateCopy.loggedUser\n          });\n        }\n\n        return stateCopy;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default usersReducer;\nexport const tryLogIn = (username, password) => ({\n  type: LOG_IN,\n  username: username,\n  password: password\n});\nexport const trySignUp = (username, password, email) => ({\n  type: SIGN_UP,\n  username: username,\n  password: password,\n  email: email\n});\nexport const likeOrDislikeCommentActionCreator = (comment_id, like_or_dislike) => ({\n  type: ADD_LIKED_OR_DISLIKED_COMMENT,\n  id: comment_id,\n  like_or_dislike: like_or_dislike\n});","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/webproject/src/redux/reducers/usersR.js"],"names":["LOG_IN","SIGN_UP","ADD_LIKED_OR_DISLIKED_COMMENT","intialState","status","loggedUser","users","getUsersFromDataBase","usersReducer","state","action","type","i","length","usersInfo","name","username","password","stateCopy","newUser","id","email","commentsInfo","likedComments","dislikedComments","markedBooks","markedFilms","lastReadBook","lastWatchedFilm","addUser","like_or_dislike","push","updateUser","tryLogIn","trySignUp","likeOrDislikeCommentActionCreator","comment_id"],"mappings":"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","sourcesContent":["const LOG_IN = 'LOG_IN';\r\nconst SIGN_UP = 'SIGN-UP';\r\nconst ADD_LIKED_OR_DISLIKED_COMMENT = 'ADD_LIKED_OR_DISLIKED_COMMENT';\r\n\r\n\r\nlet intialState = {status:'-', loggedUser:'', users: getUsersFromDataBase()};\r\n\r\nconst usersReducer = (state = intialState, action) => {\r\n  switch (action.type) {\r\n    case LOG_IN:{\r\n      for (let i=0; i<state.users.length;i++){\r\n        if ((state.users[i].usersInfo.name == action.username) && (state.users[i].usersInfo.password == action.password)){\r\n          let stateCopy = {...state}\r\n          stateCopy.loggedUser = state.users[i]\r\n          stateCopy.status = '+';\r\n          return stateCopy;\r\n        }\r\n      }\r\n\r\n      return state;\r\n    }\r\n    case SIGN_UP:{\r\n      for (let i=0; i<state.users.length;i++){\r\n        if (state.users[i].usersInfo.name == action.username){\r\n          return state;\r\n        }\r\n      }\r\n      let stateCopy = {...state}\r\n\r\n      let newUser = {id:[stateCopy.users.length-1],usersInfo:{name:action.username, email:action.email, password:action.password}, commentsInfo:{likedComments:[], dislikedComments:[]},markedBooks:[], markedFilms:[], lastReadBook:'', lastWatchedFilm:''}\r\n\r\n      stateCopy.users = addUser(newUser);\r\n      stateCopy.loggedUser = stateCopy.users[stateCopy.users.length-1]\r\n      stateCopy.status = '+';\r\n      return stateCopy;\r\n    }\r\n    case ADD_LIKED_OR_DISLIKED_COMMENT:{\r\n\r\n      for (let i=0; i<state.loggedUser.commentsInfo.likedComments.length; i++){\r\n        if (action.id == state.loggedUser.commentsInfo.likedComments[i].id){\r\n          return state\r\n        }\r\n      }\r\n      for (let i=0; i<state.loggedUser.commentsInfo.dislikedComments.length; i++){\r\n        if (action.id == state.loggedUser.commentsInfo.dislikedComments[i].id){\r\n          return state\r\n        }\r\n      }\r\n\r\n      let stateCopy = {...state}\r\n\r\n      if (action.like_or_dislike == 'like'){\r\n        stateCopy.loggedUser.commentsInfo.likedComments = [...stateCopy.loggedUser.commentsInfo.likedComments]\r\n        stateCopy.loggedUser.commentsInfo.likedComments.push(action.id)\r\n        updateUser(stateCopy.loggedUser.id, {...stateCopy.loggedUser})\r\n      }else if (action.like_or_dislike == 'dislike'){\r\n        stateCopy.loggedUser.commentsInfo.dislikedComments = [...stateCopy.loggedUser.commentsInfo.dislikedComments]\r\n        stateCopy.loggedUser.commentsInfo.dislikedComments.push(action.id)\r\n        updateUser(stateCopy.loggedUser.id, {...stateCopy.loggedUser})\r\n      }\r\n      return stateCopy;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default usersReducer;\r\n\r\nexport const tryLogIn = (username, password) => (\r\n  {type: LOG_IN, username:username, password:password});\r\nexport const trySignUp = (username, password, email) => (\r\n  {type: SIGN_UP, username:username, password:password, email:email});\r\nexport const likeOrDislikeCommentActionCreator = (comment_id, like_or_dislike) => (\r\n    {type: ADD_LIKED_OR_DISLIKED_COMMENT, id:comment_id, like_or_dislike:like_or_dislike});\r\n"]},"metadata":{},"sourceType":"module"}