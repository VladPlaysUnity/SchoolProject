{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\Litsey_10th_grade\\\\Informatics\\\\Fictionlib\\\\SchoolProject\\\\client\\\\src\\\\components\\\\ChosenFiction\\\\chosenFictionsContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport { getAllFictions, getRatingOfFictionFromUser, getOverallRatingOfFiction } from './../../DataBase/Fictions.js';\nimport { getUsersFriends, getFictionAtUser } from './../../DataBase/Users.js';\nimport { getFictionsComments } from './../../DataBase/Comments.js';\nimport { getLoggedInStatus, getLoggedUserId } from './../../LocalInfo/localInfo.js';\nimport { changeUsersRatingOfFictionActionCreator, changeUsersStatusOfFictionActionCreator, addCommentActionCreator } from './../../redux/reducers/chosenFictionReducer.js';\nimport { Routes, Route } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport ChosenFiction from './chosenFiction.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChosenFictionsContainer = props => {\n  _s();\n\n  const [fictions, setFictions] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  let fictionLinks = data.map(fiction => {\n    let link = '';\n\n    if (fiction.type == 'book') {\n      link = '/bookCatalog/' + fiction.iD;\n    } else if (fiction.type == 'film') {\n      link = '/filmCatalog/' + fiction.iD;\n    }\n\n    let view = '';\n\n    if (getLoggedInStatus()) {\n      view = 'loggedInUsersView';\n    } else {\n      view = 'notLoggedInUsersView';\n    }\n\n    let changeUsersRatingOfFiction = rating => {\n      props.dispatch(changeUsersRatingOfFictionActionCreator(fiction.iD, getLoggedUserId(), rating));\n    };\n\n    let changeUsersStatusOfFiction = status => {\n      props.dispatch(changeUsersStatusOfFictionActionCreator(getLoggedUserId(), fiction.iD, status));\n    };\n\n    let fictionAtFriends = []; //let friendsOfUser = getUsersFriends(getLoggedUserId())\n    //for (var i = 0; i < friendsOfUser.length; i++) {\n    //  fictionAtFriends.push({iD:friendsOfUser[i].iD, name:friendsOfUser[i].usersInfo.name, status:getFictionAtUser(fiction.iD, friendsOfUser[i].iD)})\n    //}\n\n    let addComment = content => {\n      props.dispatch(addCommentActionCreator(getLoggedUserId(), fiction.iD, content));\n    };\n\n    return /*#__PURE__*/_jsxDEV(ChosenFiction, {\n      fiction: fiction,\n      loggedIn: getLoggedInStatus(),\n      usersStatus: \"not completed\",\n      usersRating: 5,\n      overallRating: 6,\n      comments: [],\n      fictionAtFriends: fictionAtFriends,\n      addComment: addComment,\n      changeUsersRatingOfFiction: changeUsersRatingOfFiction,\n      changeUsersStatusOfFiction: changeUsersStatusOfFiction,\n      view: view,\n      dispatch: props.dispatch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: fictionLinks\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChosenFictionsContainer, \"obAetlKVoodKZ3zQZQfNPx8ZPqA=\");\n\n_c = ChosenFictionsContainer;\nexport default ChosenFictionsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChosenFictionsContainer\");","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/SchoolProject/client/src/components/ChosenFiction/chosenFictionsContainer.jsx"],"names":["getAllFictions","getRatingOfFictionFromUser","getOverallRatingOfFiction","getUsersFriends","getFictionAtUser","getFictionsComments","getLoggedInStatus","getLoggedUserId","changeUsersRatingOfFictionActionCreator","changeUsersStatusOfFictionActionCreator","addCommentActionCreator","Routes","Route","useState","useEffect","ChosenFiction","ChosenFictionsContainer","props","fictions","setFictions","error","setError","isLoaded","setIsLoaded","fictionLinks","data","map","fiction","link","type","iD","view","changeUsersRatingOfFiction","rating","dispatch","changeUsersStatusOfFiction","status","fictionAtFriends","addComment","content"],"mappings":"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","sourcesContent":["import {getAllFictions, getRatingOfFictionFromUser, getOverallRatingOfFiction} from './../../DataBase/Fictions.js'\r\nimport {getUsersFriends, getFictionAtUser} from './../../DataBase/Users.js'\r\nimport {getFictionsComments} from './../../DataBase/Comments.js'\r\nimport {getLoggedInStatus, getLoggedUserId} from './../../LocalInfo/localInfo.js'\r\nimport {changeUsersRatingOfFictionActionCreator, changeUsersStatusOfFictionActionCreator, addCommentActionCreator} from './../../redux/reducers/chosenFictionReducer.js'\r\nimport {Routes, Route} from \"react-router-dom\";\r\nimport {useState, useEffect} from 'react';\r\nimport ChosenFiction from './chosenFiction.jsx'\r\n\r\nconst ChosenFictionsContainer = (props) =>{\r\n\r\n  const [fictions, setFictions] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    let fictionLinks = data.map((fiction)=>{\r\n    let link = ''\r\n    if (fiction.type == 'book'){\r\n      link = '/bookCatalog/' + fiction.iD;\r\n    } else if (fiction.type == 'film'){\r\n      link = '/filmCatalog/' + fiction.iD;\r\n    }\r\n\r\n    let view = ''\r\n    if (getLoggedInStatus()){\r\n      view = 'loggedInUsersView';\r\n    }else{\r\n      view = 'notLoggedInUsersView';\r\n    }\r\n\r\n    let changeUsersRatingOfFiction = (rating) =>{\r\n      props.dispatch(changeUsersRatingOfFictionActionCreator(fiction.iD, getLoggedUserId(), rating))\r\n    }\r\n    let changeUsersStatusOfFiction = (status) =>{\r\n      props.dispatch(changeUsersStatusOfFictionActionCreator(getLoggedUserId(), fiction.iD, status))\r\n    }\r\n\r\n\r\n    let fictionAtFriends = []\r\n    //let friendsOfUser = getUsersFriends(getLoggedUserId())\r\n    //for (var i = 0; i < friendsOfUser.length; i++) {\r\n    //  fictionAtFriends.push({iD:friendsOfUser[i].iD, name:friendsOfUser[i].usersInfo.name, status:getFictionAtUser(fiction.iD, friendsOfUser[i].iD)})\r\n    //}\r\n\r\n    let addComment = (content) =>{\r\n      props.dispatch(addCommentActionCreator(getLoggedUserId(),fiction.iD, content))\r\n    }\r\n\r\n    return (<ChosenFiction fiction={fiction} loggedIn={getLoggedInStatus()}\r\n              usersStatus='not completed'\r\n              usersRating={5}\r\n              overallRating={6}\r\n              comments={[]}\r\n              fictionAtFriends={fictionAtFriends} addComment={addComment}\r\n              changeUsersRatingOfFiction={changeUsersRatingOfFiction}\r\n              changeUsersStatusOfFiction={changeUsersStatusOfFiction}\r\n              view={view} dispatch={props.dispatch}/>)\r\n  })\r\n\r\n  return (\r\n    <Routes>\r\n      {fictionLinks}\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default ChosenFictionsContainer;\r\n"]},"metadata":{},"sourceType":"module"}