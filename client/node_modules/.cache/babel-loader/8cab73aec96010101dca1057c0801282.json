{"ast":null,"code":"function Comment(id, staticInfo, dynamicInfo) {\n  this.id = id;\n  this.staticInfo = staticInfo;\n  this.dynamicInfo = dynamicInfo;\n}\n\n_c = Comment;\nlet comment0 = new Comment(0, {\n  author: 2,\n  place: 3,\n  content: 'lol'\n}, {\n  likes: [0, 2],\n  dislikes: [1]\n});\nlet comment1 = new Comment(1, {\n  author: 1,\n  place: 1,\n  content: 'olol'\n}, {\n  likes: [0, 2],\n  dislikes: [1]\n});\nlet comment2 = new Comment(2, {\n  author: 0,\n  place: 0,\n  content: 'lolo'\n}, {\n  likes: [0, 2],\n  dislikes: [1]\n});\nlet comment3 = new Comment(3, {\n  author: 1,\n  place: 2,\n  content: 'lool'\n}, {\n  likes: [0, 2],\n  dislikes: [1]\n});\nlet dbComments = {\n  comments: [comment0, comment1, comment2, comment3]\n};\nexport const addComment = (author_id, place_id, content) => {\n  //creates and adds comment to a db\n  let newComment = new Comment(dbComments.comments[dbComments.comments.length - 1].id + 1, {\n    author: author_id,\n    place: place_id,\n    content: content\n  }, {\n    likes: [],\n    dislikes: []\n  });\n};\nexport const changeLikeOrDislikeOfComment = (user_id, comment_id, like_or_dislike) => {\n  //changes the list of likes or dislikes of mentioned comment in db\n  for (var i = 0; i < dbComments.comments.length; i++) {\n    if (dbComments.comments[i].id == comment_id) {\n      if (like_or_dislike == 'like') {\n        if (dbComments.comments[i].likes.includes(user_id)) {\n          return 'User has already liked';\n        } else {\n          dbComments.comments[i].likes.push(user_id);\n          return 'Success!';\n        }\n      } else if (like_or_dislike == 'dislike') {\n        if (dbComments.comments[i].dislikes.includes(user_id)) {\n          return 'User has already disliked';\n        } else {\n          dbComments.comments[i].dislikes.push(user_id);\n          return 'Success!';\n        }\n      }\n    }\n  }\n};\nexport const getCommentById = comment_id => {\n  //returns comment whose id is metioned\n  for (var i = 0; i < dbComments.comments.length; i++) {\n    if (dbComments.comments[i].id == comment_id) {\n      return dbComments.comments[i];\n    }\n  }\n};\nexport const getUsersComments = user_id => {\n  //returns list of all comments of mentioned user\n  let usersComments = [];\n\n  for (var i = 0; i < dbComments.comments.length; i++) {\n    if (dbComments.comments[i].staticInfo.author == user_id) {\n      usersComments.push(dbComments.comments[i]);\n    }\n  }\n\n  return usersComments;\n};\nexport const getFictionsComments = fiction_id => {\n  //returns list of all comments which were written under mentioned fiction\n  let fictionsComments = [];\n\n  for (var i = 0; i < dbComments.comments.length; i++) {\n    if (dbComments.comments[i].staticInfo.place == fiction_id) {\n      fictionsComments.push(dbComments.comments[i]);\n    }\n  }\n\n  return fictionsComments;\n};\nexport const getStatusOfCommentFromUser = (user_id, comment_id) => {\n  //returns how user estimated the comment\n  for (var i = 0; i < dbComments.comments.length; i++) {\n    if (dbComments.comments[i].staticInfo.place == fiction_id) {\n      if (dbComments.comments[i].dynamicInfo.likes.includes(user_id)) {\n        return 'like';\n      } else if (dbComments.comments[i].dynamicInfo.dislikes.includes(user_id)) {\n        return 'dislike';\n      } else {\n        return '0';\n      }\n    }\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/webproject/src/DataBase/Comments.js"],"names":["Comment","id","staticInfo","dynamicInfo","comment0","author","place","content","likes","dislikes","comment1","comment2","comment3","dbComments","comments","addComment","author_id","place_id","newComment","length","changeLikeOrDislikeOfComment","user_id","comment_id","like_or_dislike","i","includes","push","getCommentById","getUsersComments","usersComments","getFictionsComments","fiction_id","fictionsComments","getStatusOfCommentFromUser"],"mappings":"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","sourcesContent":["function Comment(id, staticInfo, dynamicInfo) {\r\n  this.id = id;\r\n  this.staticInfo = staticInfo;\r\n  this.dynamicInfo = dynamicInfo;\r\n}\r\n\r\nlet comment0 = new Comment(0, {author:2, place:3, content:'lol'}, {likes:[0, 2], dislikes:[1]})\r\nlet comment1 = new Comment(1, {author:1, place:1, content:'olol'}, {likes:[0, 2], dislikes:[1]})\r\nlet comment2 = new Comment(2, {author:0, place:0, content:'lolo'}, {likes:[0, 2], dislikes:[1]})\r\nlet comment3 = new Comment(3, {author:1, place:2, content:'lool'}, {likes:[0, 2], dislikes:[1]})\r\n\r\nlet dbComments = {comments: [comment0, comment1, comment2, comment3]}\r\n\r\n\r\nexport const addComment = (author_id, place_id, content) => {\r\n  //creates and adds comment to a db\r\n  let newComment = new Comment(dbComments.comments[dbComments.comments.length-1].id + 1, {author:author_id, place:place_id, content:content}, {likes:[], dislikes:[]})\r\n}\r\n\r\nexport const changeLikeOrDislikeOfComment = (user_id, comment_id, like_or_dislike) =>{\r\n  //changes the list of likes or dislikes of mentioned comment in db\r\n  for (var i = 0; i < dbComments.comments.length; i++) {\r\n    if (dbComments.comments[i].id == comment_id){\r\n      if (like_or_dislike == 'like'){\r\n        if (dbComments.comments[i].likes.includes(user_id)){\r\n          return 'User has already liked'\r\n        } else{\r\n          dbComments.comments[i].likes.push(user_id)\r\n          return 'Success!'\r\n        }\r\n      } else if(like_or_dislike == 'dislike'){\r\n        if (dbComments.comments[i].dislikes.includes(user_id)){\r\n          return 'User has already disliked'\r\n        } else{\r\n          dbComments.comments[i].dislikes.push(user_id)\r\n          return 'Success!'\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const getCommentById = (comment_id) =>{\r\n  //returns comment whose id is metioned\r\n  for (var i = 0; i < dbComments.comments.length; i++) {\r\n    if (dbComments.comments[i].id == comment_id){\r\n      return dbComments.comments[i]\r\n    }\r\n  }\r\n}\r\n\r\nexport const getUsersComments = (user_id) =>{\r\n  //returns list of all comments of mentioned user\r\n  let usersComments = []\r\n  for (var i = 0; i < dbComments.comments.length; i++) {\r\n    if (dbComments.comments[i].staticInfo.author == user_id){\r\n      usersComments.push(dbComments.comments[i])\r\n    }\r\n  }\r\n  return usersComments\r\n}\r\n\r\nexport const getFictionsComments = (fiction_id) =>{\r\n  //returns list of all comments which were written under mentioned fiction\r\n  let fictionsComments = []\r\n  for (var i = 0; i < dbComments.comments.length; i++) {\r\n    if (dbComments.comments[i].staticInfo.place == fiction_id){\r\n      fictionsComments.push(dbComments.comments[i])\r\n    }\r\n  }\r\n  return fictionsComments\r\n}\r\n\r\nexport const getStatusOfCommentFromUser = (user_id, comment_id) =>{\r\n  //returns how user estimated the comment\r\n  for (var i = 0; i < dbComments.comments.length; i++) {\r\n    if (dbComments.comments[i].staticInfo.place == fiction_id){\r\n      if (dbComments.comments[i].dynamicInfo.likes.includes(user_id)){\r\n        return 'like'\r\n      } else if (dbComments.comments[i].dynamicInfo.dislikes.includes(user_id)) {\r\n        return 'dislike'\r\n      } else{\r\n        return '0'\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}