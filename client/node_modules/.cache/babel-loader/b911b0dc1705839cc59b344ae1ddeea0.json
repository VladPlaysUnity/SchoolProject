{"ast":null,"code":"function User(id, usersInfo, friends, markedFictions) {\n  this.id = id;\n  this.usersInfo = usersInfo;\n  this.friends = friends;\n  this.markedFictions = markedFictions;\n}\n\n_c = User;\nlet user0 = new User(0, {\n  profilePhoto: '',\n  name: 'John',\n  password: '123',\n  email: 'lol@gmail.com'\n}, [2, 1], [{\n  fiction_id: 0,\n  status: 'dropped'\n}, {\n  fiction_id: 2,\n  status: 'completed'\n}]);\nlet user1 = new User(1, {\n  profilePhoto: '',\n  name: 'Paul',\n  password: '456',\n  email: 'lol2@gmail.com'\n}, [0], [{\n  fiction_id: 0,\n  status: 'not completed'\n}, {\n  fiction_id: 3,\n  status: 'planned'\n}]);\nlet user2 = new User(2, {\n  profilePhoto: '',\n  name: 'Kate',\n  password: '789',\n  email: 'lol3@gmail.com'\n}, [0], [{\n  fiction_id: 1,\n  status: 'in progress'\n}, {\n  fiction_id: 2,\n  status: 'completed'\n}, {\n  fiction_id: 0,\n  status: 'planned'\n}]);\nexport let dbUsers = {\n  users: [user0, user1, user2]\n};\nexport const addUser = (username, password, email) => {\n  //adds user to db\n  let newUser = new User(dbUsers.users[dbUsers.users.length - 1].id + 1, {\n    name: username,\n    password: password,\n    email: email\n  }, [], []);\n  dbUsers.users.push(newUser);\n  return newUser.id;\n};\nexport const getAllUsers = () => {\n  //returns all users from db\n  return dbUsers.users;\n};\nexport const getUserById = user_id => {\n  //returns user whose id is mentioned\n  for (let i = 0; i < dbUsers.users.length; i++) {\n    if (dbUsers.users[i].id == user_id) {\n      return dbUsers.users[i];\n    }\n  }\n};\nexport const getUsersFriends = user_id => {\n  //returns list of objects(users) which are friends of user\n  let friendsOfUser = [];\n  let user = getUserById(user_id);\n\n  for (let i = 0; i < user.friends.length; i++) {\n    friendsOfUser.push(getUserById(user.friends[i]));\n  }\n\n  return friendsOfUser;\n};\nexport const getFictionAtUser = (fiction_id, user_id) => {\n  //returns metioned users status of fiction\n  let user = getUserById(user_id);\n\n  for (var i = 0; i < user.markedFictions.length; i++) {\n    if (user.markedFictions[i].fiction_id == fiction_id) {\n      return user.markedFictions[i].status;\n    }\n  }\n\n  return 'not completed';\n};\nexport const changeUsersStatusOfFiction = (user_id, fiction_id, status) => {\n  for (let i = 0; i < dbUsers.users.length; i++) {\n    if (dbUsers.users[i].id == user_id) {\n      for (let j = 0; j < dbUsers.users[i].markedFictions.length; j++) {\n        if (dbUsers.users[i].markedFictions[j].fiction_id == fiction_id) {\n          if (status == 'not completed') {\n            dbUsers.users[i].markedFictions.splice(j, 1);\n            return;\n          } else {\n            dbUsers.users[i].markedFictions[j].status = status;\n            return;\n          }\n        }\n      }\n    }\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/webproject/src/DataBase/Users.js"],"names":["User","id","usersInfo","friends","markedFictions","user0","profilePhoto","name","password","email","fiction_id","status","user1","user2","dbUsers","users","addUser","username","newUser","length","push","getAllUsers","getUserById","user_id","i","getUsersFriends","friendsOfUser","user","getFictionAtUser","changeUsersStatusOfFiction","j","splice"],"mappings":"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","sourcesContent":["function User(id, usersInfo, friends, markedFictions) {\r\n  this.id = id;\r\n  this.usersInfo = usersInfo;\r\n  this.friends = friends;\r\n  this.markedFictions = markedFictions;\r\n}\r\n\r\nlet user0 = new User(0, {profilePhoto:'', name:'John', password:'123', email:'lol@gmail.com'}, [2, 1], [{fiction_id: 0, status:'dropped'}, {fiction_id: 2, status:'completed'}])\r\nlet user1 = new User(1, {profilePhoto:'', name:'Paul', password:'456', email:'lol2@gmail.com'}, [0], [{fiction_id: 0, status:'not completed'}, {fiction_id: 3, status:'planned'}])\r\nlet user2 = new User(2, {profilePhoto:'', name:'Kate', password:'789', email:'lol3@gmail.com'}, [0], [{fiction_id: 1, status:'in progress'}, {fiction_id: 2, status:'completed'}, {fiction_id: 0, status:'planned'}])\r\n\r\nexport let dbUsers = {users:[user0, user1, user2]}\r\n\r\n\r\nexport const addUser = (username, password, email) =>{\r\n  //adds user to db\r\n  let newUser = new User(dbUsers.users[dbUsers.users.length-1].id + 1, {name:username, password:password, email:email}, [], [])\r\n  dbUsers.users.push(newUser);\r\n  return newUser.id\r\n}\r\n\r\nexport const getAllUsers = () =>{\r\n  //returns all users from db\r\n  return dbUsers.users;\r\n}\r\n\r\nexport const getUserById = (user_id) =>{\r\n  //returns user whose id is mentioned\r\n  for (let i=0;i < dbUsers.users.length; i++){\r\n    if (dbUsers.users[i].id == user_id){\r\n      return dbUsers.users[i]\r\n    }\r\n  }\r\n}\r\n\r\nexport const getUsersFriends = (user_id) =>{\r\n  //returns list of objects(users) which are friends of user\r\n  let friendsOfUser = [];\r\n  let user = getUserById(user_id);\r\n  for (let i=0;i < user.friends.length; i++){\r\n    friendsOfUser.push(getUserById(user.friends[i]))\r\n  }\r\n  return friendsOfUser\r\n}\r\n\r\nexport const getFictionAtUser = (fiction_id, user_id)=>{\r\n  //returns metioned users status of fiction\r\n  let user = getUserById(user_id);\r\n  for (var i = 0; i < user.markedFictions.length; i++) {\r\n    if (user.markedFictions[i].fiction_id == fiction_id){\r\n      return user.markedFictions[i].status\r\n    }\r\n  }\r\n  return 'not completed'\r\n}\r\n\r\nexport const changeUsersStatusOfFiction = (user_id, fiction_id, status) =>{\r\n  for (let i=0;i < dbUsers.users.length; i++){\r\n    if (dbUsers.users[i].id == user_id){\r\n      for (let j = 0; j < dbUsers.users[i].markedFictions.length; j++) {\r\n        if (dbUsers.users[i].markedFictions[j].fiction_id == fiction_id){\r\n          if ((status == 'not completed')){\r\n            dbUsers.users[i].markedFictions.splice(j, 1)\r\n            return\r\n          } else {\r\n            dbUsers.users[i].markedFictions[j].status = status\r\n            return\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}