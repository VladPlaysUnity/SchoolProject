{"ast":null,"code":"import { addUser, getAllUsers } from './../../DataBase/Users.js';\nimport { getLoggedUserId, setLoggedUserId } from './../../LocalInfo/localInfo.js';\nconst LOG_IN = 'LOG-IN';\nconst SIGN_UP = 'SIGN-UP';\nlet initialState = {};\n\nconst registrationReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN:\n      {\n        async function getId() {\n          const response = await fetch(`http://localhost:5000/user/checkIfUsersDataIsRight/${action.username}/${action.password}`);\n\n          if (!response.ok) {\n            const message = `An error occurred at registpage: ${response.statusText}`;\n            window.alert(message);\n            return;\n          }\n\n          return await response.json();\n        }\n\n        getId().then(id => {\n          setLoggedUserId(id);\n          return state;\n        });\n      }\n\n    case SIGN_UP:\n      {\n        async function signUpFunc(name, pass, email) {\n          const newUser = {\n            name: name,\n            password: pass,\n            email: email\n          };\n          await fetch(\"http://localhost:5000/user/add\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newUser)\n          }).then(d => {\n            async function getId() {\n              const response = await fetch(`http://localhost:5000/user/checkIfUsersDataIsRight/${name}/${pass}`);\n\n              if (!response.ok) {\n                const message = `An error occurred at registpage: ${response.statusText}`;\n                window.alert(message);\n                return;\n              }\n\n              return await response.json();\n            }\n\n            getId().then(id => {\n              setLoggedUserId(id);\n              return state;\n            });\n          }).catch(error => {\n            window.alert(error);\n            return;\n          });\n        }\n\n        signUpFunc(action.username, action.password, action.email);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default registrationReducer;\nexport const tryLogIn = (username, password) => ({\n  type: LOG_IN,\n  username: username,\n  password: password\n});\nexport const trySignUp = (username, password, email) => ({\n  type: SIGN_UP,\n  username: username,\n  password: password,\n  email: email\n});","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/SchoolProject/client/src/redux/reducers/registrationReducer.js"],"names":["addUser","getAllUsers","getLoggedUserId","setLoggedUserId","LOG_IN","SIGN_UP","initialState","registrationReducer","state","action","type","getId","response","fetch","username","password","ok","message","statusText","window","alert","json","then","id","signUpFunc","name","pass","email","newUser","method","headers","body","JSON","stringify","d","catch","error","tryLogIn","trySignUp"],"mappings":"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","sourcesContent":["import {addUser, getAllUsers} from './../../DataBase/Users.js'\r\nimport {getLoggedUserId, setLoggedUserId} from './../../LocalInfo/localInfo.js'\r\n\r\nconst LOG_IN = 'LOG-IN';\r\nconst SIGN_UP = 'SIGN-UP';\r\n\r\nlet initialState = {}\r\n\r\nconst registrationReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOG_IN:{\r\n      async function getId(){\r\n        const response = await fetch(`http://localhost:5000/user/checkIfUsersDataIsRight/${action.username}/${action.password}`);\r\n\r\n        if (!response.ok) {\r\n           const message = `An error occurred at registpage: ${response.statusText}`;\r\n            window.alert(message);\r\n            return;\r\n        }\r\n\r\n        return await response.json();\r\n      }\r\n      getId().then((id)=>{\r\n        setLoggedUserId(id)\r\n        return state\r\n      })\r\n    }\r\n    case SIGN_UP:{\r\n      async function signUpFunc(name, pass, email) {\r\n\r\n        const newUser = { name: name, password: pass, email:email };\r\n        await fetch(\"http://localhost:5000/user/add\", {\r\n         method: \"POST\",\r\n         headers: {\r\n           \"Content-Type\": \"application/json\",\r\n         },\r\n         body: JSON.stringify(newUser),\r\n       })\r\n       .then((d)=>{\r\n         async function getId(){\r\n           const response = await fetch(`http://localhost:5000/user/checkIfUsersDataIsRight/${name}/${pass}`);\r\n\r\n           if (!response.ok) {\r\n              const message = `An error occurred at registpage: ${response.statusText}`;\r\n               window.alert(message);\r\n               return;\r\n           }\r\n\r\n           return await response.json();\r\n         }\r\n         getId().then((id)=>{\r\n           setLoggedUserId(id)\r\n          return state\r\n         })\r\n       })\r\n       .catch(error => {\r\n         window.alert(error);\r\n         return;\r\n       });\r\n      }\r\n      signUpFunc(action.username, action.password, action.email)\r\n\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default registrationReducer;\r\n\r\nexport const tryLogIn = (username, password) => (\r\n  {type: LOG_IN, username:username, password:password});\r\nexport const trySignUp = (username, password, email) => (\r\n  {type: SIGN_UP, username:username, password:password, email:email});\r\n"]},"metadata":{},"sourceType":"module"}