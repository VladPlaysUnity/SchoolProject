{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\Litsey_10th_grade\\\\Informatics\\\\Fictionlib\\\\webproject\\\\src\\\\components\\\\ChosenFiction\\\\chosenFictionsContainer.jsx\";\nimport { getAllFictions, getRatingOfFictionFromUser, getOverallRatingOfFiction } from './../../DataBase/Fictions.js';\nimport { getUsersFriends, getFictionAtUser } from './../../DataBase/Users.js';\nimport { getFictionsComments } from './../../DataBase/Comments.js';\nimport { getLoggedInStatus, getLoggedUserId } from './../../LocalInfo/localInfo.js';\nimport { changeUsersRatingOfFiction, changeUsersStatusOfFiction } from './../../redux/reducers/chosenFictionReducer.js';\nimport { Routes, Route } from \"react-router-dom\";\nimport ChosenFiction from './chosenFiction.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChosenFictionsContainer = props => {\n  let fictionLinks = getAllFictions().map(fiction => {\n    let link = '';\n\n    if (fiction.type == 'book') {\n      link = '/bookCatalog/' + fiction.id;\n    } else if (fiction.type == 'film') {\n      link = '/filmCatalog/' + fiction.id;\n    }\n\n    let view = '';\n\n    if (getLoggedInStatus()) {\n      view = 'loggedInUsersView';\n    } else {\n      view = 'notLoggedInUsersView';\n    }\n\n    let changeUsersRatingOfFiction = rating => {\n      props.dispatch(changeUsersRatingOfFiction(getLoggedUserId(), fiction.id, rating));\n    };\n\n    let changeUsersStatusOfFiction = status => {\n      props.dispatch(changeUsersStatusOfFiction(getLoggedUserId(), fiction.id, status));\n    };\n\n    let fictionAtFriends = [];\n    let friendsOfUser = getUsersFriends(getLoggedUserId());\n\n    for (var i = 0; i < friendsOfUser.length; i++) {\n      fictionAtFriends.push({\n        id: friendsOfUser[i].id,\n        name: friendsOfUser[i].usersInfo.name,\n        status: getFictionAtUser(fiction.id, friendsOfUser[i].id)\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(Route, {\n      path: link,\n      element: /*#__PURE__*/_jsxDEV(ChosenFiction, {\n        fiction: fiction,\n        loggedIn: getLoggedInStatus(),\n        usersStatus: getFictionAtUser(fiction.id, getLoggedUserId()),\n        usersRating: getRatingOfFictionFromUser(fiction.id, getLoggedUserId()),\n        overallRating: getOverallRatingOfFiction(fiction.id),\n        comments: getFictionsComments(fiction.id),\n        fictionAtFriends: fictionAtFriends,\n        changeUsersRatingOfFiction: changeUsersRatingOfFiction,\n        changeUsersStatusOfFiction: changeUsersStatusOfFiction,\n        view: view,\n        dispatch: props.dispatch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: fictionLinks\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChosenFictionsContainer;\nexport default ChosenFictionsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChosenFictionsContainer\");","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/webproject/src/components/ChosenFiction/chosenFictionsContainer.jsx"],"names":["getAllFictions","getRatingOfFictionFromUser","getOverallRatingOfFiction","getUsersFriends","getFictionAtUser","getFictionsComments","getLoggedInStatus","getLoggedUserId","changeUsersRatingOfFiction","changeUsersStatusOfFiction","Routes","Route","ChosenFiction","ChosenFictionsContainer","props","fictionLinks","map","fiction","link","type","id","view","rating","dispatch","status","fictionAtFriends","friendsOfUser","i","length","push","name","usersInfo"],"mappings":"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","sourcesContent":["import {getAllFictions, getRatingOfFictionFromUser, getOverallRatingOfFiction} from './../../DataBase/Fictions.js'\r\nimport {getUsersFriends, getFictionAtUser} from './../../DataBase/Users.js'\r\nimport {getFictionsComments} from './../../DataBase/Comments.js'\r\nimport {getLoggedInStatus, getLoggedUserId} from './../../LocalInfo/localInfo.js'\r\nimport {changeUsersRatingOfFiction, changeUsersStatusOfFiction} from './../../redux/reducers/chosenFictionReducer.js'\r\nimport {Routes, Route} from \"react-router-dom\";\r\nimport ChosenFiction from './chosenFiction.jsx'\r\n\r\nconst ChosenFictionsContainer = (props) =>{\r\n  let fictionLinks = getAllFictions().map((fiction)=>{\r\n\r\n    let link = ''\r\n    if (fiction.type == 'book'){\r\n      link = '/bookCatalog/' + fiction.id;\r\n    } else if (fiction.type == 'film'){\r\n      link = '/filmCatalog/' + fiction.id;\r\n    }\r\n\r\n    let view = ''\r\n    if (getLoggedInStatus()){\r\n      view = 'loggedInUsersView';\r\n    }else{\r\n      view = 'notLoggedInUsersView';\r\n    }\r\n\r\n    let changeUsersRatingOfFiction = (rating) =>{\r\n      props.dispatch(changeUsersRatingOfFiction(getLoggedUserId(), fiction.id, rating))\r\n    }\r\n    let changeUsersStatusOfFiction = (status) =>{\r\n      props.dispatch(changeUsersStatusOfFiction(getLoggedUserId(), fiction.id, status))\r\n    }\r\n\r\n\r\n    let fictionAtFriends = []\r\n    let friendsOfUser = getUsersFriends(getLoggedUserId())\r\n    for (var i = 0; i < friendsOfUser.length; i++) {\r\n      fictionAtFriends.push({id:friendsOfUser[i].id, name:friendsOfUser[i].usersInfo.name, status:getFictionAtUser(fiction.id, friendsOfUser[i].id)})\r\n    }\r\n\r\n    return (<Route path={link}\r\n    element={<ChosenFiction fiction={fiction} loggedIn={getLoggedInStatus()}\r\n              usersStatus={getFictionAtUser(fiction.id, getLoggedUserId())}\r\n              usersRating={getRatingOfFictionFromUser(fiction.id, getLoggedUserId())}\r\n              overallRating={getOverallRatingOfFiction(fiction.id)}\r\n              comments={getFictionsComments(fiction.id)}\r\n              fictionAtFriends={fictionAtFriends}\r\n              changeUsersRatingOfFiction={changeUsersRatingOfFiction}\r\n              changeUsersStatusOfFiction={changeUsersStatusOfFiction}\r\n              view={view} dispatch={props.dispatch}/>}/>)\r\n  })\r\n\r\n  return (\r\n    <Routes>\r\n      {fictionLinks}\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default ChosenFictionsContainer;\r\n"]},"metadata":{},"sourceType":"module"}