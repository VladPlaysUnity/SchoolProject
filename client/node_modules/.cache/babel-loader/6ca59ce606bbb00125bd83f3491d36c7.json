{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\Litsey_10th_grade\\\\Informatics\\\\Fictionlib\\\\SchoolProject\\\\client\\\\src\\\\components\\\\ChosenFiction\\\\chosenFictionsContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport { getAllFictions, getRatingOfFictionFromUser, getOverallRatingOfFiction } from './../../DataBase/Fictions.js';\nimport { getUsersFriends, getFictionAtUser } from './../../DataBase/Users.js';\nimport { getFictionsComments } from './../../DataBase/Comments.js';\nimport { getLoggedInStatus, getLoggedUserId } from './../../LocalInfo/localInfo.js';\nimport { changeUsersRatingOfFictionActionCreator, changeUsersStatusOfFictionActionCreator, addCommentActionCreator } from './../../redux/reducers/chosenFictionReducer.js';\nimport { Routes, Route } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport ChosenFiction from './chosenFiction.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChosenFictionsContainer = props => {\n  _s();\n\n  const [fictions, setFictions] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    let fictionPromise = getAllFictions().then(result => {\n      setIsLoaded(true);\n      setFictions(result);\n    });\n  });\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Routes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(Routes, {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  } else if (isLoaded) {\n    let fictionLinks = fictions.map(fiction => {\n      let link = '';\n\n      if (fiction.type == 'book') {\n        link = '/bookCatalog/' + fiction.iD;\n      } else if (fiction.type == 'film') {\n        link = '/filmCatalog/' + fiction.iD;\n      }\n\n      let view = '';\n\n      if (getLoggedInStatus()) {\n        view = 'loggedInUsersView';\n      } else {\n        view = 'notLoggedInUsersView';\n      }\n\n      let changeUsersRatingOfFiction = rating => {\n        props.dispatch(changeUsersRatingOfFictionActionCreator(fiction.iD, getLoggedUserId(), rating));\n      };\n\n      let changeUsersStatusOfFiction = status => {\n        props.dispatch(changeUsersStatusOfFictionActionCreator(getLoggedUserId(), fiction.iD, status));\n      };\n\n      let fictionAtFriends = []; //let friendsOfUser = getUsersFriends(getLoggedUserId())\n      //for (var i = 0; i < friendsOfUser.length; i++) {\n      //  fictionAtFriends.push({iD:friendsOfUser[i].iD, name:friendsOfUser[i].usersInfo.name, status:getFictionAtUser(fiction.iD, friendsOfUser[i].iD)})\n      //}\n\n      let addComment = content => {\n        props.dispatch(addCommentActionCreator(getLoggedUserId(), fiction.iD, content));\n      };\n\n      return /*#__PURE__*/_jsxDEV(ChosenFiction, {\n        fiction: fiction,\n        loggedIn: getLoggedInStatus(),\n        usersStatus: \"not completed\",\n        usersRating: 5,\n        overallRating: 6,\n        comments: [],\n        fictionAtFriends: fictionAtFriends,\n        addComment: addComment,\n        changeUsersRatingOfFiction: changeUsersRatingOfFiction,\n        changeUsersStatusOfFiction: changeUsersStatusOfFiction,\n        view: view,\n        dispatch: props.dispatch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(Routes, {\n      children: fictionLinks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, this);\n  }\n};\n\n_s(ChosenFictionsContainer, \"U2qeAcp/LsLkXUg637ac3gpNBqo=\");\n\n_c = ChosenFictionsContainer;\nexport default ChosenFictionsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChosenFictionsContainer\");","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/SchoolProject/client/src/components/ChosenFiction/chosenFictionsContainer.jsx"],"names":["getAllFictions","getRatingOfFictionFromUser","getOverallRatingOfFiction","getUsersFriends","getFictionAtUser","getFictionsComments","getLoggedInStatus","getLoggedUserId","changeUsersRatingOfFictionActionCreator","changeUsersStatusOfFictionActionCreator","addCommentActionCreator","Routes","Route","useState","useEffect","ChosenFiction","ChosenFictionsContainer","props","fictions","setFictions","error","setError","isLoaded","setIsLoaded","fictionPromise","then","result","fictionLinks","map","fiction","link","type","iD","view","changeUsersRatingOfFiction","rating","dispatch","changeUsersStatusOfFiction","status","fictionAtFriends","addComment","content"],"mappings":"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","sourcesContent":["import {getAllFictions, getRatingOfFictionFromUser, getOverallRatingOfFiction} from './../../DataBase/Fictions.js'\r\nimport {getUsersFriends, getFictionAtUser} from './../../DataBase/Users.js'\r\nimport {getFictionsComments} from './../../DataBase/Comments.js'\r\nimport {getLoggedInStatus, getLoggedUserId} from './../../LocalInfo/localInfo.js'\r\nimport {changeUsersRatingOfFictionActionCreator, changeUsersStatusOfFictionActionCreator, addCommentActionCreator} from './../../redux/reducers/chosenFictionReducer.js'\r\nimport {Routes, Route} from \"react-router-dom\";\r\nimport {useState, useEffect} from 'react';\r\nimport ChosenFiction from './chosenFiction.jsx'\r\n\r\nconst ChosenFictionsContainer = (props) =>{\r\n\r\n  const [fictions, setFictions] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  useEffect(()=>{\r\n    let fictionPromise = getAllFictions()\r\n    .then((result)=>{\r\n      setIsLoaded(true);\r\n      setFictions(result)\r\n    })\r\n\r\n  })\r\n\r\n  if(error){\r\n    return <Routes></Routes>\r\n  } else if(!isLoaded){\r\n    return <Routes>Loading</Routes>\r\n  }else if(isLoaded){\r\n    let fictionLinks = fictions.map((fiction)=>{\r\n    let link = ''\r\n    if (fiction.type == 'book'){\r\n      link = '/bookCatalog/' + fiction.iD;\r\n    } else if (fiction.type == 'film'){\r\n      link = '/filmCatalog/' + fiction.iD;\r\n    }\r\n\r\n    let view = ''\r\n    if (getLoggedInStatus()){\r\n      view = 'loggedInUsersView';\r\n    }else{\r\n      view = 'notLoggedInUsersView';\r\n    }\r\n\r\n    let changeUsersRatingOfFiction = (rating) =>{\r\n      props.dispatch(changeUsersRatingOfFictionActionCreator(fiction.iD, getLoggedUserId(), rating))\r\n    }\r\n    let changeUsersStatusOfFiction = (status) =>{\r\n      props.dispatch(changeUsersStatusOfFictionActionCreator(getLoggedUserId(), fiction.iD, status))\r\n    }\r\n\r\n\r\n    let fictionAtFriends = []\r\n    //let friendsOfUser = getUsersFriends(getLoggedUserId())\r\n    //for (var i = 0; i < friendsOfUser.length; i++) {\r\n    //  fictionAtFriends.push({iD:friendsOfUser[i].iD, name:friendsOfUser[i].usersInfo.name, status:getFictionAtUser(fiction.iD, friendsOfUser[i].iD)})\r\n    //}\r\n\r\n    let addComment = (content) =>{\r\n      props.dispatch(addCommentActionCreator(getLoggedUserId(),fiction.iD, content))\r\n    }\r\n\r\n    return (<ChosenFiction fiction={fiction} loggedIn={getLoggedInStatus()}\r\n              usersStatus='not completed'\r\n              usersRating={5}\r\n              overallRating={6}\r\n              comments={[]}\r\n              fictionAtFriends={fictionAtFriends} addComment={addComment}\r\n              changeUsersRatingOfFiction={changeUsersRatingOfFiction}\r\n              changeUsersStatusOfFiction={changeUsersStatusOfFiction}\r\n              view={view} dispatch={props.dispatch}/>)\r\n  })\r\n\r\n  return (\r\n    <Routes>\r\n      {fictionLinks}\r\n    </Routes>\r\n  );\r\n  }\r\n}\r\n\r\nexport default ChosenFictionsContainer;\r\n"]},"metadata":{},"sourceType":"module"}