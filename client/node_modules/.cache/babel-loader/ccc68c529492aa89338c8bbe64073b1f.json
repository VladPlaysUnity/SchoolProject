{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\Litsey_10th_grade\\\\Informatics\\\\Fictionlib\\\\SchoolProject\\\\client\\\\src\\\\components\\\\CommentsComponent\\\\commentsContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport s from './commentsContainer.module.css';\nimport { changeLikeOrDislikeOfCommentActionCreator } from './../../redux/reducers/profileReducer.js';\nimport { getLoggedInStatus, getLoggedUserId } from './../../LocalInfo/localInfo.js';\nimport { getUsersComments, getStatusOfCommentFromUser } from './../../DataBase/Comments.js';\nimport { getFictionById } from './../../DataBase/Fictions.js';\nimport { getUserById } from './../../DataBase/Users.js';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport CommentBlock from './Comment/comment.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CommentsContainer = props => {\n  _s();\n\n  const [comments, setComments] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  let promises = [];\n  let params = useParams();\n  useEffect(() => {\n    if (getLoggedInStatus()) {\n      setComments(props.comments.map(comment => {\n        promises.push(getStatusOfCommentFromUser(getLoggedUserId(), comment.iD));\n        promises.push(getUserById(parseInt(comment.staticInfo.author)).then(user => user.usersInfo.name));\n        promises.push(getFictionById(parseInt(comment.staticInfo.place)).then(fiction => fiction.info.name));\n        Promise.all(promises).then(data => {\n          return /*#__PURE__*/_jsxDEV(CommentBlock, {\n            comment: comment,\n            status: promises[0],\n            author: promises[1],\n            place: promises[2],\n            loggedIn: getLoggedInStatus(),\n            like_or_dislike: props.like_or_dislike\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 18\n          }, this);\n        });\n        setIsLoaded(true);\n      }));\n    } else {\n      setComments(props.comments.map(comment => {\n        promises.push(getUserById(parseInt(comment.staticInfo.author)).then(user => user.usersInfo.name));\n        promises.push(getFictionById(parseInt(comment.staticInfo.place)).then(fiction => fiction.info.name));\n        Promise.all(promises).then(data => {\n          return /*#__PURE__*/_jsxDEV(CommentBlock, {\n            comment: comment,\n            status: 'none',\n            author: promises[0],\n            place: promises[1],\n            loggedIn: getLoggedInStatus(),\n            like_or_dislike: props.like_or_dislike\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 18\n          }, this);\n        });\n        setIsLoaded(true);\n      }));\n    }\n  }, [params]);\n\n  if (isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.comments,\n      children: comments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.comments,\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(CommentsContainer, \"pJb1cF+Zyw/E1CzGnTkX0y/TOMk=\", false, function () {\n  return [useParams];\n});\n\n_c = CommentsContainer;\nexport default CommentsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentsContainer\");","map":{"version":3,"sources":["D:/Learning/Litsey_10th_grade/Informatics/Fictionlib/SchoolProject/client/src/components/CommentsComponent/commentsContainer.jsx"],"names":["s","changeLikeOrDislikeOfCommentActionCreator","getLoggedInStatus","getLoggedUserId","getUsersComments","getStatusOfCommentFromUser","getFictionById","getUserById","useEffect","useState","useParams","CommentBlock","CommentsContainer","props","comments","setComments","isLoaded","setIsLoaded","promises","params","map","comment","push","iD","parseInt","staticInfo","author","then","user","usersInfo","name","place","fiction","info","Promise","all","data","like_or_dislike"],"mappings":"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","sourcesContent":["import s from './commentsContainer.module.css'\r\nimport {changeLikeOrDislikeOfCommentActionCreator} from './../../redux/reducers/profileReducer.js'\r\nimport {getLoggedInStatus, getLoggedUserId} from './../../LocalInfo/localInfo.js'\r\nimport {getUsersComments, getStatusOfCommentFromUser} from './../../DataBase/Comments.js'\r\nimport {getFictionById} from './../../DataBase/Fictions.js'\r\nimport {getUserById} from './../../DataBase/Users.js'\r\nimport { useEffect, useState } from 'react';\r\nimport {useParams} from 'react-router-dom'\r\nimport CommentBlock from './Comment/comment.jsx'\r\n\r\nconst CommentsContainer= (props)=>{\r\n  const [comments, setComments] = useState([])\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n\r\n  let promises = []\r\n  let params = useParams()\r\n  useEffect(()=>{\r\n    if (getLoggedInStatus()){\r\n      setComments(props.comments.map((comment) =>{\r\n        promises.push(getStatusOfCommentFromUser(getLoggedUserId(), comment.iD))\r\n        promises.push(getUserById(parseInt(comment.staticInfo.author)).then((user)=>user.usersInfo.name))\r\n        promises.push(getFictionById(parseInt(comment.staticInfo.place)).then((fiction)=>fiction.info.name))\r\n        Promise.all(promises)\r\n        .then((data)=>{\r\n          return <CommentBlock comment={comment} status={promises[0]} author={promises[1]} place={promises[2]} loggedIn={getLoggedInStatus()} like_or_dislike={props.like_or_dislike}/>\r\n        })\r\n        setIsLoaded(true)\r\n      }))\r\n    } else{\r\n      setComments(props.comments.map((comment) =>{\r\n        promises.push(getUserById(parseInt(comment.staticInfo.author)).then((user)=>user.usersInfo.name))\r\n        promises.push(getFictionById(parseInt(comment.staticInfo.place)).then((fiction)=>fiction.info.name))\r\n        Promise.all(promises)\r\n        .then((data)=>{\r\n          return <CommentBlock comment={comment} status={'none'} author={promises[0]} place={promises[1]} loggedIn={getLoggedInStatus()} like_or_dislike={props.like_or_dislike}/>\r\n        })\r\n        setIsLoaded(true)\r\n      }))\r\n    }\r\n  },[params])\r\n\r\n  if(isLoaded){\r\n    return (\r\n      <div className={s.comments}>\r\n        {comments}\r\n      </div>\r\n    )\r\n  } else if(!isLoaded){\r\n    return (\r\n      <div className={s.comments}>\r\n        Loading...\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default CommentsContainer;\r\n"]},"metadata":{},"sourceType":"module"}